Index: SpotifyApiPractice.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module external.linked.project.id=\"$MODULE_DIR$/pom.xml\" external.system.module.type=\"SINGLE_MODULE\" external.system.module.version=\"223-2\" org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"AdditionalModuleElements\">\n    <content url=\"file://$MODULE_DIR$\" dumb=\"true\">\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/resources\" type=\"java-test-resource\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/target/generated-sources/annotations\" isTestSource=\"false\" generated=\"true\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\n    </content>\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SpotifyApiPractice.iml b/SpotifyApiPractice.iml
--- a/SpotifyApiPractice.iml	(revision 86eeec2381a6b1e5a6ab1e917720e3ed754b8ef7)
+++ b/SpotifyApiPractice.iml	(date 1700727806474)
@@ -1,13 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="$MODULE_DIR$/pom.xml" external.system.module.type="SINGLE_MODULE" external.system.module.version="223-2" org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+<module version="4">
   <component name="AdditionalModuleElements">
     <content url="file://$MODULE_DIR$" dumb="true">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/annotations" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
       <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
   </component>
Index: src/DataBase/DataBase.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DataBase/DataBase.json b/src/DataBase/DataBase.json
--- a/src/DataBase/DataBase.json	(revision 86eeec2381a6b1e5a6ab1e917720e3ed754b8ef7)
+++ b/src/DataBase/DataBase.json	(date 1700770796373)
@@ -1,0 +1,2 @@
+{"Username":{"playlist2":["links"],"playlist name":["links"]},
+  "Username2":{"asd":["sd"],"bangesr":["jeedadww","aeee"],"banwdgesr":["jeedadww","aeee"]}}
\ No newline at end of file
Index: src/DataBase/DataAccessInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DataBase;\nimport com.opencsv.CSVReader;\nimport com.opencsv.CSVReaderBuilder;\nimport com.opencsv.CSVWriter;\nimport com.opencsv.exceptions.CsvException;\nimport entity.Song;\nimport java.io.*;\nimport java.util.*;\n\n\npublic class DataAccessInterface {\n    public void addUser(String Username) throws IOException {\n        String[] userData = {Username, \"\", \"\"};\n        CSVWriter writer = new CSVWriter(new FileWriter(\"UserPlaylists.csv\"));\n        List<String[]> data = getFileData();\n\n        if(checkUserExists(data, Username)) {\n            System.out.println(\"Username already exists choose new name\");\n        }\n        else {\n            data.add(userData);\n        }\n        writer.writeAll(data);\n        writer.close();\n\n\n    }\n\n    private boolean checkUserExists(List<String[]> data, String username){\n        for (String[] line : data) {\n            if (line[0].equals(username))\n                return true;\n        }\n        return false;\n\n    }\n    public void addPlaylist(ArrayList<Song> playlist,String Username, String playlistName ) throws IOException {\n        CSVWriter writer = new CSVWriter(new FileWriter(\"UserPlaylists.csv\"));\n        List<String[]> data = getFileData();\n\n\n    }\n\n    public ArrayList<Song>[] getPlaylist(String playlistName, String username) {\n        return null;\n    }\n\n    public ArrayList<Song>[] getUserPlaylists(String username) {\n        return null;\n    }\n\n    private static List<String[]> getFileData(){\n        try {\n            CSVReader reader = new CSVReaderBuilder(new FileReader(\"UsersPlaylists.csv\")).build();\n            return reader.readAll();\n        } catch (IOException | CsvException e) {\n            System.out.println(\"broke lmao\");\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DataBase/DataAccessInterface.java b/src/DataBase/DataAccessInterface.java
--- a/src/DataBase/DataAccessInterface.java	(revision 86eeec2381a6b1e5a6ab1e917720e3ed754b8ef7)
+++ b/src/DataBase/DataAccessInterface.java	(date 1700768523412)
@@ -1,60 +1,67 @@
 package DataBase;
-import com.opencsv.CSVReader;
-import com.opencsv.CSVReaderBuilder;
-import com.opencsv.CSVWriter;
-import com.opencsv.exceptions.CsvException;
 import entity.Song;
+import org.json.simple.JSONArray;
+import org.json.simple.JSONObject;
+import org.json.simple.parser.*;
 import java.io.*;
 import java.util.*;
 
 
 public class DataAccessInterface {
-    public void addUser(String Username) throws IOException {
-        String[] userData = {Username, "", ""};
-        CSVWriter writer = new CSVWriter(new FileWriter("UserPlaylists.csv"));
-        List<String[]> data = getFileData();
-
-        if(checkUserExists(data, Username)) {
-            System.out.println("Username already exists choose new name");
-        }
-        else {
-            data.add(userData);
+    public static void main(String[] args) throws IOException, ParseException {
+        String[] songs = {"jeedadww","aeee"};
+        addPlaylist(songs, "Monkey", "banwdgesr");
+    }
+    public static void addUser(String Username) throws IOException, ParseException {
+        JSONObject joe = getFileData();
+        Map m = new LinkedHashMap();
+        if(checkUserExists(joe, Username)){
+            System.out.println("L");
         }
-        writer.writeAll(data);
-        writer.close();
-
+        else
+            joe.put(Username, m);
+        PrintWriter pw = new PrintWriter("/Users/derekdsouza/Documents/Intellij projects/GroupProject/src/DataBase/DataBase.json");
+        pw.write(joe.toJSONString());
+        pw.flush();
+        pw.close();
 
     }
 
-    private boolean checkUserExists(List<String[]> data, String username){
-        for (String[] line : data) {
-            if (line[0].equals(username))
-                return true;
-        }
-        return false;
+    private boolean checkUserExists(JSONObject data, String Username){
+        return data.containsKey(Username);
+    }
+    public static void addPlaylist(String[] playlist, String Username, String playlistName) throws IOException, ParseException {
+        JSONObject joe = getFileData();
+        JSONArray jar = new JSONArray();
+        Map m = ((Map) joe.get(Username));
+        for(String song : playlist)
+            jar.add(song);
+        m.put(playlistName, jar);
+        System.out.println(m);
+        joe.put(Username, m);
+        PrintWriter pw = new PrintWriter("/Users/derekdsouza/Documents/Intellij projects/GroupProject/src/DataBase/DataBase.json");
+        pw.write(joe.toJSONString());
+        pw.flush();
+        pw.close();
 
     }
-    public void addPlaylist(ArrayList<Song> playlist,String Username, String playlistName ) throws IOException {
-        CSVWriter writer = new CSVWriter(new FileWriter("UserPlaylists.csv"));
-        List<String[]> data = getFileData();
 
+    public ArrayList<Song> getPlaylist(String playlistName, String Username) throws IOException, ParseException {
+        JSONObject joe = getFileData();
+        Map m = ((Map) joe.get(Username));
+        ArrayList<String> playlistLinks = ((ArrayList<String>) m.get(playlistName));
+        ArrayList<Song> playlist = new ArrayList<Song>();
+        for(String link : playlistLinks) {
 
-    }
-
-    public ArrayList<Song>[] getPlaylist(String playlistName, String username) {
-        return null;
+        }
     }
 
     public ArrayList<Song>[] getUserPlaylists(String username) {
         return null;
     }
 
-    private static List<String[]> getFileData(){
-        try {
-            CSVReader reader = new CSVReaderBuilder(new FileReader("UsersPlaylists.csv")).build();
-            return reader.readAll();
-        } catch (IOException | CsvException e) {
-            System.out.println("broke lmao");
-        }
+    private static JSONObject getFileData() throws IOException, ParseException {
+        Object obj = new JSONParser().parse(new FileReader("/Users/derekdsouza/Documents/Intellij projects/GroupProject/src/DataBase/DataBase.json"));
+        return (JSONObject) obj;
     }
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>SpotifyApiPractice</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <maven.compiler.source>20</maven.compiler.source>\n        <maven.compiler.target>20</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <repositories>\n        <repository>\n            <id>central</id>\n            <url>https://repo.maven.apache.org/maven2</url>\n        </repository>\n    </repositories>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.squareup.okhttp3</groupId>\n            <artifactId>okhttp</artifactId>\n            <version>3.14.4</version>\n        </dependency>\n        <dependency>\n            <groupId>org.json</groupId>\n            <artifactId>json</artifactId>\n            <version>20210307</version> \n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.12.5</version> \n        </dependency>\n\n\n    </dependencies>\n\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 86eeec2381a6b1e5a6ab1e917720e3ed754b8ef7)
+++ b/pom.xml	(date 1700726752148)
@@ -37,6 +37,11 @@
             <artifactId>jackson-databind</artifactId>
             <version>2.12.5</version> 
         </dependency>
+        <dependency>
+            <groupId>com.googlecode.json-simple</groupId>
+            <artifactId>json-simple</artifactId>
+            <version>1.1.1</version>
+        </dependency>
 
 
     </dependencies>
